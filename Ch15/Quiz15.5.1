/* Write a class template named Triad that has 3 private data members with independent type template parameters. 
The class should have a constructor, access functions, and a print() member function that is defined outside the class. */


#include <iostream>
#include <string>

template <typename T, typename U, typename V>

class Triad
{
private:
    //3 template members
    T m_first{};
    U m_second{};
    V m_third{};

public:
    //constructor
    Triad (const T& first, const U& second, const V& third)
    : m_first{first}
    , m_second{second}
    , m_third {third}
    {
    }

    // forward declaring print inside the class
    void print() const;

    //access functions:
    //getter
    const T& first() const{ return m_first;}   //defining the return to be constant Template

};

// defining print() outside the class
template <typename T, typename U, typename V>
void Triad<T,U,V>::print() const
{
    std::cout << "[" << m_first << ", " << m_second << ", " << m_third << "]";
}


int main()
{
    Triad<int, int, int> t1{ 1, 2, 3 };
    t1.print();
    std::cout << '\n';
    std::cout << t1.first() << '\n';

    using namespace std::literals::string_literals;
    const Triad t2{ 1, 2.3, "Hello"s };
    t2.print();
    std::cout << '\n';

    return 0;
}
