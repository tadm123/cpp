/*
Take the Fraction class we wrote in the previous quiz (listed below) and add an overloaded operator<< and operator>> to it.
*/

#include <iostream>
#include <numeric> // for std::gcd

class Fraction
{
private:
    int m_numerator{};
    int m_denominator{};

public:
    Fraction(int numerator=0, int denominator=1):
            m_numerator{numerator}, m_denominator{denominator}
    {
        // We put reduce() in the constructor to ensure any new fractions we make get reduced!
        // Any fractions that are overwritten will need to be re-reduced
        reduce();
    }

    void reduce()
    {
        int gcd{ std::gcd(m_numerator, m_denominator) };
        if (gcd)
        {
            m_numerator /= gcd;
            m_denominator /= gcd;
        }
    }

    friend Fraction operator*(const Fraction& f1, const Fraction& f2);
    friend Fraction operator*(const Fraction& f1, int value);
    friend Fraction operator*(int value, const Fraction& f1);
    friend std::ostream& operator<< (std::ostream& out, const Fraction& f);
    friend std::istream& operator>> (std::istream& in, Fraction& f);

    void print() const
    {
        std::cout << m_numerator << '/' << m_denominator << '\n';
    }
};

Fraction operator*(const Fraction& f1, const Fraction& f2)
{
    return Fraction(f1.m_numerator * f2.m_numerator, f1.m_denominator * f2.m_denominator);
}

Fraction operator*(const Fraction& f1, int value)
{
    return Fraction(f1.m_numerator * value, f1.m_denominator);
}

Fraction operator*(int value, const Fraction& f1)
{
    return Fraction(f1.m_numerator * value, f1.m_denominator);
}

std::ostream& operator<< (std::ostream& out, const Fraction& f)
{
    // Since operator<< is a friend of the Point class, we can access Point's members directly.
    out << f.m_numerator << "/" << f.m_denominator ; // actual output done here

    return out; // return std::ostream so we can chain calls to operator<<
}

std::istream& operator>>(std::istream& in, Fraction& f1)
{
    char ignore{};

    // Overwrite the values of f1
    in >> f1.m_numerator >> ignore >> f1.m_denominator;

    // Ignore anything else
    in.ignore(std::numeric_limits<std::streamsize>::max(), '\n');

    // Since we overwrite the existing f1, we need to reduce again
    f1.reduce();

    return in;
}


int main()
{
    Fraction f1;
    std::cout << "Enter fraction 1: ";
    std::cin >> f1;

    Fraction f2;
    std::cout << "Enter fraction 2: ";
    std::cin >> f2;

    std::cout << f1 << " * " << f2 << " is " << f1 * f2 << '\n'; // note: The result of f1 * f2 is an r-value

    return 0;
}
