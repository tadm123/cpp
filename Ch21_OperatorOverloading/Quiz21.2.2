/*
Add overloaded multiplication operators to handle multiplication between a Fraction and integer, and between two Fractions. Use the friend function method.

Hint: To multiply two fractions, first multiply the two numerators together, and then multiply the two denominators together. To multiply a fraction and an integer, 
multiply the numerator of the fraction by the integer and leave the denominator alone.
*/


#include <iostream>

class Fraction
{
private:
    int m_num{};
    int m_den{};

public:
    Fraction(int num, int den)
        :m_num{num}, m_den(den)
    {
    }

    void print()
    {
        std::cout << m_num << "/" << m_den << '\n';
    }

    friend Fraction operator*(const Fraction& f1, const Fraction& f2);
    friend Fraction operator*(const int& f1, const Fraction& f2);
    friend Fraction operator*(const Fraction& f1, const int& f2);
};

// multiplication of classes
Fraction operator*(const Fraction& f1, const Fraction& f2)
{
    int TotalNumerator{f1.m_num * f2.m_num};
    int TotalDenominator{f1.m_den * f2.m_den};

    return {TotalNumerator, TotalDenominator};
}

// multiplcation of int x class
Fraction operator*(const int& f1, const Fraction& f2)
{
    int TotalNumerator{f1 * f2.m_num};

    return {TotalNumerator, f2.m_den};
}

// multiplcation of class x int
Fraction operator*(const Fraction& f1, const int& f2)
{
    int TotalNumerator{f1.m_num * f2};

    return {TotalNumerator, f1.m_den};
}


int main()
{
    Fraction f1{2, 5};
    f1.print();

    Fraction f2{3, 8};
    f2.print();

    Fraction f3{ f1 * f2 };     //f1.m_num = 2, f1.m_den = 5      f2.m_num = 3, f2.m_den = 8
    f3.print();

    Fraction f4{ f1 * 2 };
    f4.print();

    Fraction f5{ 2 * f2 };
    f5.print();

    Fraction f6{ Fraction{1, 2} * Fraction{2, 3} * Fraction{3, 4} };
    f6.print();

    return 0;
}
