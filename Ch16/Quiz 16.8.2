/* 
Modify your solution to quiz 1. In this version, create a function template (not a normal function) called 
isValueInArray() that takes two parameters: a std::vector, and a value. The function should return true if 
the value is in the array, and false otherwise. Call the function from main() and pass it the array of names 
and the name the user entered.

Reminder:

A function template that is using template argument deduction (when template type arguments are not explicitly specified) 
will not do conversions to match the template type parameters. The call either matches the template (and the template 
type can be deduced) or it doesnâ€™t.
A function template with an explicitly specified template type argument will convert arguments to match the parameter 
type (since the type is known).
*/


#include <iostream>
#include <vector>
#include <string_view>
#include <string>

template <typename T>
void isValueInArray(const T& n, const std::vector<T>& names )
{
    bool find{false};

    for (auto const& num : names) // iterate over array fibonacci
        if (n == num) // if num (name that you passed) is the same as the element name on the vector
            find = true;

    if (find)
        std::cout << n << " was found.";
    else
        std::cout << n << " was not found.";
}


int main()
{

  
    std::vector<std::string_view> names {"Alex", "Betty", "Caroline", "Dave", "Emily", "Fred", "Greg", "Holly"}; //a vector containting  elements of  C-style string type, but we can static_cast so it has elements of type string_view
    
    // or you can initialize them directly as string_view literals:
    // std::vector<std::string_view> names {"Alex"sv, "Betty"sv, "Caroline"sv, "Dave"sv, "Emily"sv, "Fred"sv, "Greg"sv, "Holly"sv}; 

    std::string my_name{};

    std::cout << "Enter a name: ";
    std::cin >> my_name;

    //call function (pass string and vector)
    isValueInArray<std::string_view>(my_name, names); //explicitly stating what type you're gonna pass

    return 0;
}


