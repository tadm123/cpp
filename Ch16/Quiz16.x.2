/*
Modify your program from the prior step so it now outputs:

You have 1 health potion
You have 5 torches
You have 10 arrows
You have 16 total items

Use a loop to print out the number of items and the item names for each inventory item. Handle proper pluralization of the names.

*/

#include <iostream>
#include <vector>
#include <string_view>

namespace Items
{
    enum Items
    {
        health_potions,
        torches,
        arrows,
        max_items,
    };
}

const std::string_view getItemNamesSingular(Items::Items it)
{
    switch(it)
    {
        case(Items::health_potions): return "health potion";
        case(Items::torches): return "torch";
        case(Items::arrows): return "arrow";
        default: return "???";
    }
}

const std::string_view getItemNamesPlural(Items::Items it)
{
    switch(it)
    {
        case(Items::health_potions): return "health potions";
        case(Items::torches): return "torches";
        case(Items::arrows): return "arrows";
        default: return "???";
    }
}

int countTotalItems(const std::vector<int>& arr)
{
    int sum{0};
    for (auto num: arr)
        sum += num;

    return sum;
}


void printTotal(const std::vector<int>& arr)
{
    std::cout << "You have " << countTotalItems(arr) << " total items";
}

int main()
{
    std::vector my_items{1,5,10};

    assert(std::size(my_items) == Items::max_items);



    for (int i{0}; i < Items::max_items ; ++i)
    {
        std::cout << "You have " << my_items[i] << " ";

        if (my_items[i] > 1)
            std::cout << getItemNamesPlural(static_cast<Items::Items>(i));
        else
            std::cout << getItemNamesSingular(static_cast<Items::Items>(i));

        std::cout << '\n';
    }

    printTotal(my_items);

    return 0;
}
