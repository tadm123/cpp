/*
Define an enum class named Animal that contains the following animals: pig, chicken, goat, cat, dog, duck. 
Write a function named getAnimalName() that takes an Animal parameter and uses a switch statement to return 
the name for that animal as a std::string_view (or std::string if youâ€™re using C++14). Write another function 
named printNumberOfLegs() that uses a switch statement to print the number of legs each animal walks on. 
Make sure both functions have a default case that prints an error message. Call printNumberOfLegs() from main() 
with a cat and a chicken. 
*/

#include <iostream>
#include <string_view>

enum class Animal
{
    pig,
    chicken,
    goat,
    cat,
    dog,
    duck
};

std::string_view getAnimalName(Animal animal)
{
    switch(animal)
    {
        case Animal::pig: return "pig";
        case Animal::chicken: return "chicken"; //2 legs
        case Animal::goat: return "goat";
        case Animal::cat: return "cat";
        case Animal::dog: return "dog";
        case Animal::duck: return "duck";  //2 legs
        default:  return "Invalid name";
    }
}

void printNumberOfLegs(Animal animal)    //ex animal = Animal::dog
{
    const std::string_view my_animal{ getAnimalName(animal) };  //passes Animal::dog type and returns the string "dog"

    if ((my_animal == "pig") || (my_animal == "goat") || (my_animal == "cat") || (my_animal == "dog"))
        std::cout << my_animal << " has " << "4 legs" << "\n";

    else if ((my_animal == "chicken") || (my_animal == "duck"))
        std::cout << my_animal << " has " << "2 legs" << "\n";

    else
        std::cout << "Invalid" << "\n";

}

int main()
{
    printNumberOfLegs(Animal::pig);
    printNumberOfLegs(Animal::chicken);
    printNumberOfLegs(Animal::goat);
    printNumberOfLegs(Animal::cat);
    printNumberOfLegs(Animal::dog);
    printNumberOfLegs(Animal::duck);

    return 0;
}
