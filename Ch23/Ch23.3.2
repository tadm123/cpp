/* 
Update the Department/Teacher example so the Department can handle multiple Teachers. 
This program essentially uses std:wrapper (in <functional> library) to store multiple object classes by reference in a vector. 
Then we'll have a quick operation << overloading as friend to the Department class to print the results on the command line
*/


#include <iostream>
#include <string>
#include <string_view>
#include <vector>
#include <functional>

class Teacher
{
private:
    std::string m_name{};
public:
    Teacher(std::string_view name)
            : m_name{ name }
    {
    }
    const std::string& getName() const { return m_name; }
};


class Department
{
private:
    std::vector<std::reference_wrapper<const Teacher>> m_teachers{};    //m_teachers is the name of our vector


public:
    /*Department(const Teacher& teacher)
            : m_teachers{ teacher }
    {
    }*/

    void add(const Teacher& teacher)        //adding new elements into our vector "m_teachers"
    {
        m_teachers.emplace_back(teacher);          //emplace_back is a member function of std::vector, it pushes new elements into it
    }

    // overload the << operator to print all members of std::reference_wrapper
    friend std::ostream& operator<< (std::ostream& out, const Department& department);

};


std::ostream& operator<< (std::ostream& out, const Department& department)
{
    std::cout << "Department teachers: " << '\n';

    for (auto& a: department.m_teachers)
    {
        out << a.get().getName() << '\n';
    }

    std::cout << '\n';

    return out;
}


int main()
{
    // Create a teacher outside the scope of the Department
    Teacher t1{ "Bob" };
    Teacher t2{ "Frank" };
    Teacher t3{ "Beth" };

    {
        // Create a department and add some Teachers to it
        Department department{}; // create an empty Department

        department.add(t1);
        department.add(t2);
        department.add(t3);

        std::cout << department;

    } // department goes out of scope here and is destroyed

    std::cout << t1.getName() << " still exists!\n";
    std::cout << t2.getName() << " still exists!\n";
    std::cout << t3.getName() << " still exists!\n";

    return 0;
}
