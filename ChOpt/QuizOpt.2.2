/*
A bitwise rotation is like a bitwise shift, except that any bits shifted off one end are added back to the other end. 
For example 0b1001 << 1 would be 0b0010, but a left rotate by 1 would result in 0b0011 instead. 
Implement a function that does a left rotate on a std::bitset<4>. For this one, itâ€™s okay to use test() and set().
*/

#include <bitset>
#include <iostream>

// "rotl" stands for "rotate left"
std::bitset<4> rotl(std::bitset<4> bits)
{
    //test whether LSB 0 is (1). If it is then set() last bit
    if ( bits.test(3) )     // if bitst.test(0) == 1
    {
        bits <<= 1;
        bits.set(0);
    }

    else
        bits <<= 1;

    return bits;
}

int main()
{
    std::bitset<4> bits1{ 0b1000 };
    std::cout << rotl(bits1) << '\n';

    std::bitset<4> bits2{ 0b1001 };
    std::cout << rotl(bits2) << '\n';

    return 0;
}
